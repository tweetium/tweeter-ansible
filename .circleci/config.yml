version: 2.1

orbs:
  docker: circleci/docker@0.5.19
  dockerize: ganta/dockerize@1.3.2

jobs:
  check-healthcheck-on-local:
    machine: true
    steps:
      - checkout
      - run: cd local; docker-compose up -d
      # These lines are for debugging in case a container died
      - run: cd local; docker-compose ps
      - run: cd local; docker-compose logs
      - docker/install-dockerize
      # Check that server accepts /healthcheck
      - dockerize/wait-http:
          host: localhost
          path: /healthcheck
          port: 8000
  check-healthcheck-on-remote:
    machine: true
    steps:
      - checkout
      - run: docker-compose up -d
      # Manually inject variables from environment since docker-compose
      # does not inherit environment variables
      - run: echo "do_token = \"$TF_VAR_do_token\"" >> remote/secrets.auto.tfvars
      - run: echo "do_ssh_key_name = \"$TF_VAR_do_ssh_key_name\"" >> remote/secrets.auto.tfvars
      # Get the public ssh key in a file so we can add to new hosts
      - run: ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
      # Create infrastructure
      - run: |
          docker-compose exec tweeter-infra bash -c "
            cd remote;
            terraform workspace new ci-$CIRCLE_SHA1-$CIRCLE_BUILD_NUM;
            terraform init;
            terraform apply -auto-approve;"
      # Store the main ip address to query
      # -T is required due to this issue when run from CircleCI: https://github.com/docker/compose/issues/3352
      - run: |
          IP_ADDR=$(docker-compose exec -T tweeter-infra bash -c "
            cd remote;
            terraform output main_ip_addr;");
          echo "export IP_ADDR=$IP_ADDR" >> $BASH_ENV
      - docker/install-dockerize
      # Check that server accepts /healthcheck
      - dockerize/wait-http:
          host: $IP_ADDR
          path: /healthcheck
          port: 8000
      # Always cleanup infrastructure
      - run:
          command: |
            docker-compose up -d;
            docker-compose exec tweeter-infra bash -c "
              cd remote;
              terraform destroy -auto-approve;"
          when: always

workflows:
  version: 2
  build:
    jobs:
      - check-healthcheck-on-local
      - check-healthcheck-on-remote
